@page "/meals/registernew"
@using System.Net.Http.Headers;
@inject NavigationManager NavManager

@inject HttpClient Http

<h3 style="margin:25px 0 0px 0">Register a new meal</h3>
<Divider />

@if(groupMembers is null)
{
    <Loading />
}
else
{
    <ValidateForm @ref="newMealForm" Model="@newMeal" OnValidSubmit="@OnValidSubmit">
        <div class="row g-3">
            <div class="col-12 col-sm-6">
                <BootstrapInput @bind-Value="@newMeal.Name" />
            </div>
            <div class="col-12 col-sm-6">
                <BootstrapInput @bind-Value="@newMeal.Description" />
            </div>
            <div class="col-12 col-sm-6">
                <Select @bind-Value="@newMeal.CookerId" DisplayText="Cooker" >
                    <Options>
                        <SelectOption Text="Please select..." Value="" />
                        @foreach(var member in groupMembers)
                        {
                            <SelectOption Text="@member.Name" Value="@member.Id.ToString()"/>
                        }
                    </Options>
                </Select>
@*                <a style="color:darkblue" @onclick="AssingToMe">Assign to me</a>*@ 
           </div>
            <div class="col-12 col-sm-auto">
                <DateTimePicker TValue="DateTimeOffset?" Value="@newMeal.CookDate" DisplayText="Date" />
            </div>
            @*<div class="col-12">
                <label for="text3" class="form-label">Photo:</label>
                <InputUpload TValue="string" ShowDeleteButton="true" OnChange="@OnFileChange" OnDelete="@OnFileDelete"></InputUpload>
            </div>*@
            <div class="col-12 col-sm-6">
                @*<AvatarUpload Accept="image/"  TValue="string" IsSingle="true" OnChange="@OnFileChange" OnDelete="@(fileName => Task.FromResult(true))"/>*@
                <CardUpload TValue="int" IsSingle="true" OnChange="@OnFileChange" DisplayText="nombre.jpg" OnDelete="@(fileName => Task.FromResult(true))"></CardUpload>
            </div>

            <div class="col-12 col-sm-6">
                <label class="form-label">Rate this meal</label>
                <Rate Value="@stars" IsDisable="false" OnValueChanged="@(value => { stars = value; return Task.FromResult(true); })" Max="5" />

                <div class="col-12">
                    <Textarea OnValueChanged="@(text => { review = text; return Task.CompletedTask; } )" Value="@review" placeholder="Write your review..." rows="4"></Textarea>
                </div>
            </div>
            
            @*<div class="col-12 col-sm-6">
                <BootstrapInput DisplayText="Comments" @bind-Value="@comments" />
            </div>*@
            <div class="col-12 col-sm-6">
                <Button Size="@Size.Large" IsOutline="true" ButtonType="@ButtonType.Submit" Text="Submit" style="margin-right:30px" />
                <Button Size="@Size.Large" IsOutline="true" Color="@Color.Danger" OnClick="@GoBack" Text="Cancel"></Button>
            </div>

        </div>
    </ValidateForm>
}



@code {
    MealViewModel newMeal = new MealViewModel();

    [NotNull]
    private ValidateForm? newMealForm { get; set; }

    private List<UserViewModel>? groupMembers;

    private int stars = 1;
    private string review = string.Empty;
    private string comments = string.Empty;
    private UploadFile imageFile;
    private string? fileName = "";


    protected override async Task OnInitializedAsync()
    {
        await GetGroupMembers();
    }

    private async Task GetGroupMembers()
    {
        groupMembers = await Http.GetFromJsonAsync<List<UserViewModel>>("/users/async");
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if(imageFile is not null)
        {
            string imageUrl = await UploadImage();
            newMeal.Image = imageUrl;
        }

        newMeal.groupId = 2;
        newMeal.Reviews = new() {
            new ReviewViewModel()
            {
                Stars = stars,
                Comments = review,
                CreatedDate = DateTime.Today
            }
        };

        var response = await Http.PostAsJsonAsync("/meals", newMeal);

        if (!response.IsSuccessStatusCode)
        {
            // set error message for display, log to console and return
            var errorMessage = await response.Content.ReadAsStringAsync();
            System.Console.WriteLine($"There was an error! {errorMessage}");
            return;
        }
        else
        {
            GoBack();
        }
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/meals");
    }

    private async Task<string> UploadImage()
    {
        MultipartFormDataContent dataContent = new MultipartFormDataContent();
        using var contentFile = new StreamContent(imageFile.File!.OpenReadStream());
        contentFile.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(imageFile.File.ContentType);
        dataContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");

        dataContent.Add(
            content: contentFile,
            name: imageFile.File.Name,
            fileName: imageFile.FileName ?? "image"
        );

        var response = await Http.PostAsync("/meals/image", dataContent);
        return await response.Content.ReadAsStringAsync() ?? "";
    }

    private void OnCookerSelected(UserViewModel cooker)
    {
        newMeal!.Cooker = cooker;
    }

    private Task OnFileChange(UploadFile file)
    {
        if(file.File is not null)
        {
            imageFile = file;
        }

        return Task.CompletedTask;
    }
}
